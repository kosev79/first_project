funcs = []

for i in range(5):

    def f(x=i):
        print("i =", x)

    funcs.append(f)

for func in funcs:
    func()

"""
Построчное объяснение:
Часть 1: Создание функций
python
funcs = []  # Создается пустой список для хранения функций
python
for i in range(5):  # Цикл выполнится 5 раз: i = 0, 1, 2, 3, 4
python
def f():  # Каждую итерацию создается новая функция f
    print("i =", i)  # Функция ссылается на переменную i
python
funcs.append(f)  # Созданная функция добавляется в список
Часть 2: Вызов функций
python
for func in funcs:  # Перебираем все 5 функций из списка
    func()  # Вызываем каждую функцию
Ключевой момент: почему все выводят "i = 4"?
Проблема: Все 5 функций ссылаются на одну и ту же переменную i, а не на ее значение в момент создания функции.

Что происходит:

В цикле создается 5 функций, каждая из которых "запоминает" переменную i

После завершения цикла i равна 4 (последнее значение из range(5))

Когда мы вызываем функции, они ищут текущее значение i - и все находят i = 4

Визуализация:
text
До вызова функций:
i = 4 (последнее значение после цикла)

Функция 0: print("i =", i) → i = 4
Функция 1: print("i =", i) → i = 4  
Функция 2: print("i =", i) → i = 4
Функция 3: print("i =", i) → i = 4
Функция 4: print("i =", i) → i = 4
Как исправить (если нужно):
Чтобы каждая функция запоминала текущее значение i, нужно использовать параметр по умолчанию:

python
def f(x=i):  # Значение i фиксируется в момент создания
    print("i =", x)

# Или с помощью lambda:
f = lambda x=i: print("i =", x)
Это работает потому, что аргументы по умолчанию вычисляются в момент определения функции, а не в момент вызова.


"""